!--- PROBLEM STATEMENT ---!

You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].
For each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti] ).
Return an array answer where answer[i] is the answer to the ith query.

Example 1:
Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8
Example 2:
Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]
 
Constraints:
1 <= arr.length, queries.length <= 3 * 104
1 <= arr[i] <= 109
queries[i].length == 2
0 <= lefti <= righti < arr.length

---------------------------------------------------------------------------------------
!--- SOLUTION ---!
1. Brute Force
" Get the indices from each query and calculate XOR of arr from start index to end index." This takes O(n^2) complexity.
class Solution {
public:
    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {
        vector<int> result;
        for(vector<int> x : queries){
            int entry = arr[x[0]];
            for(int i=x[0]+1;i<=x[1];++i){
                entry = entry ^ arr[i];
            }
            result.push_back(entry);
            cout<<entry<<"\n";
        }
        return result;
    }
};

2. Using Prefix Sum to calculate XOR from indices left to right where 0<=left<=right<=arr.size().
A. Create the prefix sum array of the given input array. 
B. Now for every query (1-based indexing):
i. If L is greater than 1, then print prefixSum[R] â€“ prefixSum[L-1]
ii. Else print prefixSum[R]

Example to show the flow:

Let's use the following arrays and queries:

Array (arr): [1, 3, 4, 8]
Queries: [[0, 1], [1, 2], [0, 3], [3, 3]]
1. Compute Prefix XOR Array
First, we compute the prefix XOR array (pre). This array helps us quickly compute the XOR of any subarray.

Initial Array: [1, 3, 4, 8]

Index   i	  arr[i]	     pre[i]	Explanation
0	      1	    1	         pre[0] = arr[0] = 1
1	      3	  1 ^ 3 = 2	   pre[1] = pre[0] ^ arr[1] = 1 ^ 3
2	      4	  2 ^ 4 = 6	   pre[2] = pre[1] ^ arr[2] = 2 ^ 4
3	      8	  6 ^ 8 = 14	 pre[3] = pre[2] ^ arr[3] = 6 ^ 8

So the prefix XOR array is: [1, 2, 6, 14].

2. Answer Queries Using Prefix XOR Array
Now, using the prefix XOR array, we can quickly answer each query.

Queries: [[0, 1], [1, 2], [0, 3], [3, 3]]

For each query [left, right], we calculate:

If left == 0: The result is pre[right].
Otherwise: The result is pre[right] ^ pre[left - 1].
Query	   left	 right	Calculation	                   Result
[0, 1]	  0	    1	     pre[1] = 2	                     2
[1, 2]	  1	    2	     pre[2] ^ pre[0] = 6 ^ 1 = 7	   7
[0, 3]	  0	    3	     pre[3] = 14	                   14
[3, 3]	  3	    3	     pre[3] ^ pre[2] = 14 ^ 6 = 8	   8

Explanation
Prefix XOR Array: This array helps to quickly compute the XOR of any subarray. The value at each index i in pre represents the XOR of all elements from the start of the array to index i.

Query Resolution: For each query [left, right]:

If left is 0, the result is simply pre[right] because it represents the XOR from the start to right.
If left is not 0, we need to exclude the part of the array before left. This is done by XORing pre[right] with pre[left - 1], 
which removes the XOR of elements before left.

Time Complexity:

Preprocessing: Building the prefix XOR array takes (O(n)), where (n) is the length of the input array.
Query Processing: Each query is processed in constant time (O(1)) using the precomputed prefix XOR array.
Overall, the time complexity is (O(n + q)), where (q) is the number of queries. This is efficient given the constraints.
Space Complexity:

Prefix XOR Array: Requires (O(n)) space.
Result Array: Requires (O(q)) space.
Overall, the space complexity is (O(n + q)), which is manageable within the given constraints.


CODE:

class Solution {
public:
    vector<int> xorQueries(vector<int>& arr, vector<vector<int>>& queries) {
        vector<int> result;
        //build prefix XOR array
        vector<int> pf(arr.size());
        pf[0] = arr[0];
        for(int i=1;i<arr.size();++i)   pf[i] = pf[i-1] ^ arr[i];

        for(int i : pf) cout<<i<<" "; //print prefix xor array

        for(vector<int> x : queries){
            if(x[0] > 0){
                int entry = pf[x[1]] ^ pf[x[0]-1];
                result.push_back(entry);
            }else result.push_back(pf[x[1]]);
        }

        return result;
    }
};
