-- Problem Statement -- 
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:
Input: nums = [1], k = 1
Output: [1]

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.

-----------------------------------------------------------------------------------

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> v;
        unordered_map<int,int> mp;
        for(int i : nums){
            mp[i]++;
        }
        // for(auto x:mp)  cout<<x.first<<" "<<x.second<<"\n";
        // cout<<"\n";
        vector<pair<int,int>> temp(mp.begin(),mp.end());
        //this sort will sort by key
        //sort(temp.begin(),temp.end());
        // Sort the vector by values(if a<b then asc, if a>b then desc)
        sort(temp.begin(), temp.end(),[](pair<int,int>& a, pair<int, int>& b) {
            return a.second > b.second;
        }
    );
        //for(auto x : temp) cout<<x.first<<" "<<x.second<<"\n";
        while(k--){
            v.push_back(temp[k].first);
        }
        return v;
    }
};
