--- Problem Statement ---
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.
Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
Constraints:
2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

--------------------------------------------------------------------------------------------

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> pre(n),suf(n),ans(n);
        pre[0]=1,suf[n-1]=1;
        for(int i=1;i<n;i++){
            pre[i] = pre[i-1] * nums[i-1];
            suf[n-i-1] = suf[n-i] *  nums[n-i];
        }
        for(int i=0;i<n;i++)    ans[i] = pre[i] * suf[i];
        for(auto i : pre)   cout<<i<<" ";
        cout<<"\n";
        for(auto i : suf)   cout<<i<<" ";
        for(auto i : ans)   cout<<i<<" ";

        return ans;
    }
};

//Logic
1. We can pre compute 2 arrays -
a. pre[i] - containing product of elements before that index i.
b. suf[i] - containing product of elements after that index i.
2. now in the resultant array ans[i], we multiply individual index for pre and suf to get ans[i] as 
ans[i] = pre[i] * suf[i]
3. return ans
